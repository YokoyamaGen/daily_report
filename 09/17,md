# 取り組んだ課題一覧
- Ruby on Rails5速習実践ガイド 7章〜9章

# わかったこと
- Rails
    - アセットパイプライン
        - コンパイル。coffeeやsassなどをJSやCSSにコンパイル
        - 連結。CSSやJSを一つのファイルに連結することで、読み込みのためのリクエスト数を減らし、読込み時間を短くする。
        - 圧縮。改行やコメント、スペースなどを削除することで、通信量を減らす。
        - ダイジェストを付与。ファイル名にダイジェストを付与する。

    - 外部APIのシークレットキーを暗号化して、Gitで管理する。シークレットキーを暗号化および復号化するためのマスターキーはGitでは管理しない。マスターキーは外部に流出させてはいけない。

    - 検索画面
        - 作成するにはransakというgemがあり、それのマッチャーを使用すれば、発行するSQLにLikeを含めたり、>=のような比較のSQLを発行できる。
        - 並び替えもビュー側でマッチャーを指定すれば簡単に作成できる。

    - 画像
        - ActiveStorageでは、ポリもフィック関連を使用している。画像のファイル名やタイプなどの情報を保存するモデル、そのモデルの中間テーブルとなるモデルをコマンドを実行すると作成してくれる。

    - ページネーション
        - 1ページあたりのデフォルト件数はper以外にもモデル側にデフォルトの件数を指定することやkaminariの設定ファイルを変更することで変更できる。

    - 非同期処理
        - 非同期処理をするためにsidekiqというgemを使用する。重たい処理を非同期で行うことで、ユーザを待たせないようにできる。sidekiqではRedisを使用する。
        - キューを使用すれば、ジョブの実行順序を制御できる。

    - smtp
        - メールを送受信するためのプロトコル
        - smtpサーバはメールを送信するためのサーバ
        - pop3はメールを受信するためのサーバ
    
    - yarn
        - JSのパッケージマネージャー。
        - インストールされたパッケージはnode_modulesに格納される。

    - webpacker
        - Jsのビルドツールであるwebpackのラッパー（複雑な操作をせずに簡単に利用できること）なgem
        - vue.jsやReactを使用できるようになる。
        - ES2015以降も対応している。
        - webpackerはyarnをパッケージ管理にしようしているため、yarnのインストールが必要
        - sprocketsが似たような機能を提供しているため、併用しないほうがよい。

    - rails-ujs
        - link_toでremote: trueとすることで、ajaxを使用できる。
        - link_toでmethod:deleteを使用して、deleteリクエストを送信できるのもrails-ujsのおかげ。
        - data-confirmで確認モーダルが表示されるようになる。

    - SJR(Server-generated Javascript Response)
        - サーバサイドからJsを生成して、フロント側で実行させる。

    - Turbolinks
        - 画面遷移を高速化する。
        - 同じ画面を開いた場合、データが変わった箇所のみを変更するため、画面すべてを再生成しなくて良い。
        - 同じJSやCSSも再読込みしない。

    - migration
        - rails db:migrateだけでなく、ロールバックした時の確認のためにrails db:migrate:redoも実行する。本番でロールバックしたいときに失敗する可能性もあるため。
        - マイグレーションファイルの中で、テーブルを更新する処理では、失敗した際に例外が発生するようにupdate!とする。
        - テーブルからデータを取得して処理をする際には、データ量が多い場合はallではなく、find_eachで行う。allだとデータ量が多いときにメモリを大量に使用してしまうため。find_eachだと1000件まで。
        - マイグレーションファイルの中で、同じテーブルに複数の別の処理を行う際にはキャッシュに注意する。1回目の処理でキャッシュが取得されるものの、2回目以降はキャッシュが再取得されないため、再取得のためのコードを書かないと、2回目はバグっている可能性がある。


# 次やること
- タイピング
- スッキリわかるSQL入門 付録の問題
- チェリー本の復習
- Ruby on Rails5速習実践ガイド

# 感じたこと
- 現職では確認画面を作成せずにモーダルで確認画面を実装していたため、確認画面を作成する場合は結構手間だなと思ってしまいました。バックエンドの箇所も確認画面用のアクションを定義する必要があるため。モーダルだとフロントエンドだけですべて完結するため、手間が少ないと思いました。
- sidekiqという言葉を聞いたことはありましたが、何に使用するものなのかを知らなかったため、勉強になりました。
- webpackerについて今までうまく理解できていませんでしたが、今回の学習でかなり理解を深められたのが、嬉しかったです。
- サーバサイドからJsを生成して、フロントに返す方法は初めて知りました。
- マイグレーションの箇所を読んでいて、いつもロールバックできるかを確認していなかったため、結構ゾッとしております。いきなり本番環境でロールバックをしないと思いますが、バグのあるプログラムをリリースしてしまっている可能性があるためです。今後はロールバックもできるかを確認する。
- マイグレーションファイルに誤りがあるものの、エピックブランチにマージして、チームのメンバーに共有されてしまった際にいつも新しいマイグレーションファイルで修正をかけていて良いものかと思っておりましたが、書籍でもそのやり方の方がよいと知り、ホッとしました。

# 学習時間
Today: 6 h 00 m

Total: 369 h 50 m
































































